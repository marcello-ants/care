/* tslint:disable */
/* eslint-disable */
/**
 * Ampli - A strong typed wrapper for your Analytics
 *
 * This file is generated by Amplitude.
 * To update run 'ampli pull enrollment-mfe'
 *
 * Required dependencies: amplitude-js@^8.18.0
 * Tracking Plan Version: 5
 * Build: 1.0.0
 * Runtime: browser:typescript-ampli
 *
 * [View Tracking Plan](https://data.amplitude.com/caredotcom/Care.com%20v2/events/jdt_example/latest)
 *
 * [Full Setup Instructions](https://data.amplitude.com/caredotcom/Care.com%20v2/implementation/enrollment-mfe)
 */

import amplitude, { AmplitudeClient, Callback, Config } from 'amplitude-js';

export type Environment = 'development' | 'production';

export const ApiKey: Record<Environment, string> = {
  development: 'e47fd687db6356aa118e0359bb93c3e6',
  production: '8bbcdd4ac7e4811b76a1b392f6b30ca5',
};

/**
 * Default Amplitude configuration options. Contains tracking plan information.
 */
export const DefaultOptions: ConfigExt = {
  plan: {
    version: '5',
    branch: 'jdt_example',
    source: 'enrollment-mfe',
    versionId: '6e03cad6-aa94-4dcf-b30a-be8ce0d77278',
  },
};

export interface LoadOptions {
  environment?: Environment;
  disabled?: boolean;
  client?: {
    apiKey?: string;
    options?: Partial<ConfigExt>;
    instance?: AmplitudeClient;
  };
}

export interface IdentifyProperties {
  czen_session_id?: string;
  /**
   * | Rule | Value |
   * |---|---|
   * | Enum Values | imcomplete, active, active_basic, new, closed, active_lite, active_snooze, active_premium, free_trial_premium, active_featured, inactive, stale |
   */
  member_overall_status?:
    | 'imcomplete'
    | 'active'
    | 'active_basic'
    | 'new'
    | 'closed'
    | 'active_lite'
    | 'active_snooze'
    | 'active_premium'
    | 'free_trial_premium'
    | 'active_featured'
    | 'inactive'
    | 'stale';
  /**
   * | Rule | Value |
   * |---|---|
   * | Enum Values | seeker, provider |
   */
  member_type?: 'seeker' | 'provider';
  member_uiud?: string;
  /**
   * | Rule | Value |
   * |---|---|
   * | Enum Values | childcare, seniorcare, petcare, tutoring, specialneeds, caregigs, housekeeping |
   */
  primary_service_id?:
    | 'childcare'
    | 'seniorcare'
    | 'petcare'
    | 'tutoring'
    | 'specialneeds'
    | 'caregigs'
    | 'housekeeping';
  /**
   * | Rule | Value |
   * |---|---|
   * | Type | number |
   */
  sign_up_date?: number;
  /**
   * | Rule | Value |
   * |---|---|
   * | Enum Values | mobile_web, desktop |
   */
  sign_up_web_platform?: 'mobile_web' | 'desktop';
  /**
   * | Rule | Value |
   * |---|---|
   * | Item Type | array |
   */
  test_exposure?: any[][];
  /**
   * | Rule | Value |
   * |---|---|
   * | Enum Values | housekeeping, tutoring, caregigs, child_care, senior_care, pet_care, special_needs |
   */
  vertical?:
    | 'housekeeping'
    | 'tutoring'
    | 'caregigs'
    | 'child_care'
    | 'senior_care'
    | 'pet_care'
    | 'special_needs';
  visitor_id?: string;
}

export interface JobPostedCaregiverNeedsProperties {
  cta_clicked?: string;
  /**
   * | Rule | Value |
   * |---|---|
   * | Regex |  |
   */
  url: string;
  url_path: string;
  /**
   * | Rule | Value |
   * |---|---|
   * | Enum Values | housekeeping, caregigs, tutoring, special_needs, senior_care, child_care, pet_care |
   */
  vertical?:
    | 'housekeeping'
    | 'caregigs'
    | 'tutoring'
    | 'special_needs'
    | 'senior_care'
    | 'child_care'
    | 'pet_care';
  /**
   * | Rule | Value |
   * |---|---|
   * | Enum Values | desktop, mobile_web |
   */
  web_platform: 'desktop' | 'mobile_web';
}

export interface JobPostedHourlyRateProperties {
  cta_clicked?: string;
  /**
   * | Rule | Value |
   * |---|---|
   * | Type | number |
   */
  max_pay_rate: number;
  /**
   * | Rule | Value |
   * |---|---|
   * | Type | number |
   */
  min_pay_rate: number;
  /**
   * | Rule | Value |
   * |---|---|
   * | Regex |  |
   */
  url: string;
  url_path: string;
  /**
   * | Rule | Value |
   * |---|---|
   * | Enum Values | housekeeping, caregigs, tutoring, special_needs, senior_care, child_care, pet_care |
   */
  vertical?:
    | 'housekeeping'
    | 'caregigs'
    | 'tutoring'
    | 'special_needs'
    | 'senior_care'
    | 'child_care'
    | 'pet_care';
  /**
   * | Rule | Value |
   * |---|---|
   * | Enum Values | desktop, mobile_web |
   */
  web_platform: 'desktop' | 'mobile_web';
}

export interface JobPostedScheduleProperties {
  cta_clicked?: string;
  /**
   * | Rule | Value |
   * |---|---|
   * | Item Type | string |
   */
  day_of_week: string[];
  flexible_schedule: string;
  /**
   * | Rule | Value |
   * |---|---|
   * | Enum Values | recurring, one_time, live_in |
   */
  job_type: 'recurring' | 'one_time' | 'live_in';
  /**
   * | Rule | Value |
   * |---|---|
   * | Item Type | string |
   */
  time_of_week: string[];
  /**
   * | Rule | Value |
   * |---|---|
   * | Regex |  |
   */
  url: string;
  url_path: string;
  /**
   * | Rule | Value |
   * |---|---|
   * | Enum Values | housekeeping, caregigs, tutoring, special_needs, senior_care, child_care, pet_care |
   */
  vertical?:
    | 'housekeeping'
    | 'caregigs'
    | 'tutoring'
    | 'special_needs'
    | 'senior_care'
    | 'child_care'
    | 'pet_care';
  /**
   * | Rule | Value |
   * |---|---|
   * | Enum Values | desktop, mobile_web |
   */
  web_platform: 'desktop' | 'mobile_web';
}

export interface JobPostedTypeProperties {
  cta_clicked?: string;
  /**
   * | Rule | Value |
   * |---|---|
   * | Enum Values | recurring, live_in, one_time |
   */
  type_of_care: 'recurring' | 'live_in' | 'one_time';
  /**
   * | Rule | Value |
   * |---|---|
   * | Regex |  |
   */
  url: string;
  url_path: string;
  /**
   * | Rule | Value |
   * |---|---|
   * | Enum Values | housekeeping, caregigs, tutoring, special_needs, senior_care, child_care, pet_care |
   */
  vertical?:
    | 'housekeeping'
    | 'caregigs'
    | 'tutoring'
    | 'special_needs'
    | 'senior_care'
    | 'child_care'
    | 'pet_care';
  /**
   * | Rule | Value |
   * |---|---|
   * | Enum Values | desktop, mobile_web |
   */
  web_platform: 'desktop' | 'mobile_web';
}

export interface JobPostedWhoNeedsCareProperties {
  cta_clicked?: string;
  /**
   * | Rule | Value |
   * |---|---|
   * | Regex |  |
   */
  url: string;
  url_path: string;
  /**
   * | Rule | Value |
   * |---|---|
   * | Enum Values | housekeeping, caregigs, tutoring, special_needs, senior_care, child_care, pet_care |
   */
  vertical?:
    | 'housekeeping'
    | 'caregigs'
    | 'tutoring'
    | 'special_needs'
    | 'senior_care'
    | 'child_care'
    | 'pet_care';
  /**
   * | Rule | Value |
   * |---|---|
   * | Enum Values | desktop, mobile_web |
   */
  web_platform: 'desktop' | 'mobile_web';
}

export interface MemberEnrolledCaregiverNeedsProperties {
  /**
   * | Rule | Value |
   * |---|---|
   * | Item Type | string |
   */
  caregiver_tasks: string[];
  cta_clicked?: string;
  /**
   * | Rule | Value |
   * |---|---|
   * | Enum Values | seeker, provider, smb |
   */
  member_type: 'seeker' | 'provider' | 'smb';
  screen_name?: string;
  screen_template?: string;
  url: string;
  url_path: string;
  /**
   * | Rule | Value |
   * |---|---|
   * | Enum Values | housekeeping, caregigs, tutoring, special_needs, senior_care, child_care, pet_care |
   */
  vertical?:
    | 'housekeeping'
    | 'caregigs'
    | 'tutoring'
    | 'special_needs'
    | 'senior_care'
    | 'child_care'
    | 'pet_care';
  /**
   * | Rule | Value |
   * |---|---|
   * | Enum Values | desktop, mobile_web |
   */
  web_platform: 'desktop' | 'mobile_web';
}

export interface MemberEnrolledEmailCollectionProperties {
  /**
   * | Rule | Value |
   * |---|---|
   * | Type | number |
   */
  caregiver_count?: number;
  cta_clicked?: string;
  /**
   * | Rule | Value |
   * |---|---|
   * | Enum Values | seeker, provider, smb |
   */
  member_type: 'seeker' | 'provider' | 'smb';
  screen_name?: string;
  screen_template?: string;
  url: string;
  url_path: string;
  /**
   * | Rule | Value |
   * |---|---|
   * | Enum Values | housekeeping, caregigs, tutoring, special_needs, senior_care, child_care, pet_care |
   */
  vertical?:
    | 'housekeeping'
    | 'caregigs'
    | 'tutoring'
    | 'special_needs'
    | 'senior_care'
    | 'child_care'
    | 'pet_care';
  /**
   * | Rule | Value |
   * |---|---|
   * | Enum Values | desktop, mobile_web |
   */
  web_platform: 'desktop' | 'mobile_web';
}

export interface MemberEnrolledFirstAndLastNameProperties {
  cta_clicked?: string;
  /**
   * | Rule | Value |
   * |---|---|
   * | Enum Values | seeker, provider, smb |
   */
  member_type: 'seeker' | 'provider' | 'smb';
  screen_name?: string;
  screen_template?: string;
  url: string;
  url_path: string;
  /**
   * | Rule | Value |
   * |---|---|
   * | Enum Values | housekeeping, caregigs, tutoring, special_needs, senior_care, child_care, pet_care |
   */
  vertical?:
    | 'housekeeping'
    | 'caregigs'
    | 'tutoring'
    | 'special_needs'
    | 'senior_care'
    | 'child_care'
    | 'pet_care';
  /**
   * | Rule | Value |
   * |---|---|
   * | Enum Values | desktop, mobile_web |
   */
  web_platform: 'desktop' | 'mobile_web';
}

export interface MemberEnrolledLocationProperties {
  city: string;
  cta_clicked?: string;
  /**
   * | Rule | Value |
   * |---|---|
   * | Enum Values | seeker, provider, smb |
   */
  member_type: 'seeker' | 'provider' | 'smb';
  screen_name?: string;
  screen_template?: string;
  state: string;
  url: string;
  url_path: string;
  /**
   * | Rule | Value |
   * |---|---|
   * | Enum Values | housekeeping, caregigs, tutoring, special_needs, senior_care, child_care, pet_care |
   */
  vertical?:
    | 'housekeeping'
    | 'caregigs'
    | 'tutoring'
    | 'special_needs'
    | 'senior_care'
    | 'child_care'
    | 'pet_care';
  /**
   * | Rule | Value |
   * |---|---|
   * | Enum Values | desktop, mobile_web |
   */
  web_platform: 'desktop' | 'mobile_web';
  /**
   * | Rule | Value |
   * |---|---|
   * | Type | number |
   */
  zip: number;
}

export interface MemberEnrolledTypeOfSeniorCareNeedProperties {
  cta_clicked?: string;
  /**
   * | Rule | Value |
   * |---|---|
   * | Enum Values | seeker, provider, smb |
   */
  member_type: 'seeker' | 'provider' | 'smb';
  screen_name?: string;
  screen_template?: string;
  url: string;
  url_path: string;
  /**
   * | Rule | Value |
   * |---|---|
   * | Enum Values | housekeeping, caregigs, tutoring, special_needs, senior_care, child_care, pet_care |
   */
  vertical?:
    | 'housekeeping'
    | 'caregigs'
    | 'tutoring'
    | 'special_needs'
    | 'senior_care'
    | 'child_care'
    | 'pet_care';
  /**
   * | Rule | Value |
   * |---|---|
   * | Enum Values | desktop, mobile_web |
   */
  web_platform: 'desktop' | 'mobile_web';
}

export interface ScreenViewedTypeOfSeniorCareNeedProperties {
  referer?: string;
  screen_name?: string;
  screen_template?: string;
  url: string;
  url_path: string;
  /**
   * | Rule | Value |
   * |---|---|
   * | Enum Values | housekeeping, caregigs, tutoring, special_needs, senior_care, child_care, pet_care |
   */
  vertical?:
    | 'housekeeping'
    | 'caregigs'
    | 'tutoring'
    | 'special_needs'
    | 'senior_care'
    | 'child_care'
    | 'pet_care';
  /**
   * | Rule | Value |
   * |---|---|
   * | Enum Values | desktop, mobile_web |
   */
  web_platform: 'desktop' | 'mobile_web';
}

export interface JobPostEventPropertiesProperties {
  cta_clicked?: string;
  /**
   * | Rule | Value |
   * |---|---|
   * | Regex |  |
   */
  url: string;
  url_path: string;
  /**
   * | Rule | Value |
   * |---|---|
   * | Enum Values | housekeeping, caregigs, tutoring, special_needs, senior_care, child_care, pet_care |
   */
  vertical?:
    | 'housekeeping'
    | 'caregigs'
    | 'tutoring'
    | 'special_needs'
    | 'senior_care'
    | 'child_care'
    | 'pet_care';
  /**
   * | Rule | Value |
   * |---|---|
   * | Enum Values | desktop, mobile_web |
   */
  web_platform: 'desktop' | 'mobile_web';
}

export interface MemberEnrolledStandardEventPropertiesProperties {
  cta_clicked?: string;
  /**
   * | Rule | Value |
   * |---|---|
   * | Enum Values | seeker, provider, smb |
   */
  member_type: 'seeker' | 'provider' | 'smb';
  screen_name?: string;
  screen_template?: string;
  url: string;
  url_path: string;
  /**
   * | Rule | Value |
   * |---|---|
   * | Enum Values | housekeeping, caregigs, tutoring, special_needs, senior_care, child_care, pet_care |
   */
  vertical?:
    | 'housekeeping'
    | 'caregigs'
    | 'tutoring'
    | 'special_needs'
    | 'senior_care'
    | 'child_care'
    | 'pet_care';
  /**
   * | Rule | Value |
   * |---|---|
   * | Enum Values | desktop, mobile_web |
   */
  web_platform: 'desktop' | 'mobile_web';
}

export class Identify implements BaseEvent {
  event_type = 'Identify';

  constructor(public event_properties?: IdentifyProperties) {}
}

export class Group implements BaseEvent {
  event_type = 'Group';
}

export class AccountCreatedSeeker implements BaseEvent {
  event_type = 'Account Created - Seeker';
}

export class JobPostedCaregiverNeeds implements BaseEvent {
  event_type = 'Job Posted - Caregiver Needs';

  constructor(public event_properties: JobPostedCaregiverNeedsProperties) {}
}

export class JobPostedHourlyRate implements BaseEvent {
  event_type = 'Job Posted - Hourly Rate';

  constructor(public event_properties: JobPostedHourlyRateProperties) {}
}

export class JobPostedSchedule implements BaseEvent {
  event_type = 'Job Posted - Schedule';

  constructor(public event_properties: JobPostedScheduleProperties) {}
}

export class JobPostedType implements BaseEvent {
  event_type = 'Job Posted - Type';

  constructor(public event_properties: JobPostedTypeProperties) {}
}

export class JobPostedWhoNeedsCare implements BaseEvent {
  event_type = 'Job Posted - Who Needs Care';

  constructor(public event_properties: JobPostedWhoNeedsCareProperties) {}
}

export class MemberEnrolledCaregiverNeeds implements BaseEvent {
  event_type = 'Member Enrolled - Caregiver Needs';

  constructor(public event_properties: MemberEnrolledCaregiverNeedsProperties) {}
}

export class MemberEnrolledEmailCollection implements BaseEvent {
  event_type = 'Member Enrolled - Email Collection';

  constructor(public event_properties: MemberEnrolledEmailCollectionProperties) {}
}

export class MemberEnrolledFirstAndLastName implements BaseEvent {
  event_type = 'Member Enrolled - First and Last Name';

  constructor(public event_properties: MemberEnrolledFirstAndLastNameProperties) {}
}

export class MemberEnrolledLocation implements BaseEvent {
  event_type = 'Member Enrolled - Location';

  constructor(public event_properties: MemberEnrolledLocationProperties) {}
}

export class MemberEnrolledTypeOfSeniorCareNeed implements BaseEvent {
  event_type = 'Member Enrolled - Type of Senior Care Need';

  constructor(public event_properties: MemberEnrolledTypeOfSeniorCareNeedProperties) {}
}

export class ScreenViewedTypeOfSeniorCareNeed implements BaseEvent {
  event_type = 'Screen Viewed - Type of Senior Care Need';

  constructor(public event_properties: ScreenViewedTypeOfSeniorCareNeedProperties) {}
}

// prettier-ignore
export class Ampli {
  private disabled: boolean = false;
  private amplitude?: AmplitudeClient;
  private middlewares: Middleware[] = [];

  get client(): AmplitudeClient {
    this.isInitializedAndEnabled();
    return this.amplitude!;
  }

  private isInitializedAndEnabled(): boolean {
    if (!this.amplitude) {
      console.error('ERROR: Ampli is not yet initialized. Have you called ampli.load() on app start?');
      return false;
    }
    return !this.disabled;
  }

  /**
   * Initialize the Ampli SDK. Call once when your application starts.
   * @param options Configuration options to initialize the Ampli SDK with.
   */
  load(options?: LoadOptions): void {
    this.disabled = options?.disabled ?? false;

    if (this.amplitude) {
      console.warn('WARNING: Ampli is already intialized. Ampli.load() should be called once at application startup.');
      return;
    }

    const env = options?.environment ?? 'development';
    const apiKey = options?.client?.apiKey ?? ApiKey[env];

    if (options?.client?.instance) {
      this.amplitude = options?.client?.instance;
    } else if (apiKey) {
      this.amplitude = amplitude.getInstance();
      this.amplitude?.init(apiKey, undefined, { ...DefaultOptions, ...options?.client?.options });
    } else {
      console.error("ERROR: ampli.load() requires 'environment', 'client.apiKey', or 'client.instance'");
    }
  }

  /**
   * Identify a user and set user properties.
   *
   * @param userId The user's id.
   * @param properties The user properties.
   * @param options Optional event options.
   * @param extra Extra unstructured data for middleware.
   */
  identify(
    userId: string | undefined,
    properties?: IdentifyProperties,
    options?: IdentifyOptions,
    extra?: MiddlewareExtra
  ) {
    if (!this.isInitializedAndEnabled()) {
      return;
    }

    const event: IdentifyEvent = {
      event_type: SpecialEventType.Identify,
      event_properties: properties,
      user_id: userId || options?.user_id,
      device_id: options?.device_id
    };
    this.runMiddleware({ event, extra }, payload => {
      const e = payload.event;
      if (e.user_id) {
        this.amplitude?.setUserId(e.user_id);
      }
      if (e.device_id) {
        this.amplitude?.setDeviceId(e.device_id);
      }
      const amplitudeIdentify = new amplitude.Identify();
      if (e.event_properties != null) {
        for (const [key, value] of Object.entries(e.event_properties)) {
          amplitudeIdentify.set(key, value);
        }
      }
      this.amplitude?.identify(
        amplitudeIdentify,
        options?.callback,
        // options?.errorCallback
      );
    });
  }

  setGroup(name: string, value: string | string[], options?: GroupOptions, extra?: MiddlewareExtra) {
    if (!this.isInitializedAndEnabled()) {
      return;
    }

    this.amplitude?.setGroup(name, value);
  }

  /**
   * Identify a group and set group properties.
   *
   * @param groupType The group type.
   * @param groupName The group name.
   * @param options Optional event options.
   * @param extra Extra unstructured data for middleware.
   */
  groupIdentify(
    groupType: string,
    groupName: string | string[],
    options?: GroupOptions,
    extra?: MiddlewareExtra,
  ) {
    if (!this.isInitializedAndEnabled()) {
      return;
    }

    const event: GroupEvent = {
      event_type: SpecialEventType.Group,
      user_id: options?.user_id,
      device_id: options?.device_id
    };
    this.runMiddleware({ event, extra }, payload => {
      const e = payload.event;
      if (e.user_id) {
        this.amplitude?.setUserId(e.user_id);
      }
      if (e.device_id) {
        this.amplitude?.setDeviceId(e.device_id);
      }
      const amplitudeIdentify = new amplitude.Identify();
      if (e.event_properties != null) {
        for (const [key, value] of Object.entries(e.event_properties)) {
          amplitudeIdentify.set(key, value);
        }
      }
      this.amplitude?.groupIdentify(groupType, groupName, amplitudeIdentify, options?.callback);
    });
  }

  /**
   * Track event
   *
   * @param event The event to track.
   * @param options Optional event options.
   * @param extra Extra unstructured data for middleware.
   */
  track(event: Event, options?: EventOptions, extra?: MiddlewareExtra) {
    if (!this.isInitializedAndEnabled()) {
      return;
    }

    this.runMiddleware({ event, extra }, payload => {
      this.amplitude?.logEvent(
        payload.event.event_type,
        payload.event.event_properties,
        options?.callback,
        // options?.errorCallback,
      );
    });
  }

  /**
   * Account Created - Seeker
   *
   * [View in Tracking Plan](https://data.amplitude.com/caredotcom/Care.com%20v2/events/jdt_example/latest/Account%20Created%20-%20Seeker)
   *
   * Creation of account following completion of password page
   *
   * Owner: Jason Thai
   *
   * @param options Amplitude event options.
   * @param extra Extra untyped parameters for use in middleware.
   */
  accountCreatedSeeker(
    options?: EventOptions,
    extra?: MiddlewareExtra,
  ) {
    return this.track(new AccountCreatedSeeker(), options, extra);
  }

  /**
   * Job Posted - Caregiver Needs
   *
   * [View in Tracking Plan](https://data.amplitude.com/caredotcom/Care.com%20v2/events/jdt_example/latest/Job%20Posted%20-%20Caregiver%20Needs)
   *
   * Completion on open text around what are the caregiver needs.
   *
   * Owner: Jason Thai
   *
   * @param properties The event's properties (e.g. cta_clicked)
   * @param options Amplitude event options.
   * @param extra Extra untyped parameters for use in middleware.
   */
  jobPostedCaregiverNeeds(
    properties: JobPostedCaregiverNeedsProperties,
    options?: EventOptions,
    extra?: MiddlewareExtra,
  ) {
    return this.track(new JobPostedCaregiverNeeds(properties), options, extra);
  }

  /**
   * Job Posted - Hourly Rate
   *
   * [View in Tracking Plan](https://data.amplitude.com/caredotcom/Care.com%20v2/events/jdt_example/latest/Job%20Posted%20-%20Hourly%20Rate)
   *
   * Completion of hourly rate step on job post flow in enrollment
   *
   * Owner: Jason Thai
   *
   * @param properties The event's properties (e.g. cta_clicked)
   * @param options Amplitude event options.
   * @param extra Extra untyped parameters for use in middleware.
   */
  jobPostedHourlyRate(
    properties: JobPostedHourlyRateProperties,
    options?: EventOptions,
    extra?: MiddlewareExtra,
  ) {
    return this.track(new JobPostedHourlyRate(properties), options, extra);
  }

  /**
   * Job Posted - Schedule
   *
   * [View in Tracking Plan](https://data.amplitude.com/caredotcom/Care.com%20v2/events/jdt_example/latest/Job%20Posted%20-%20Schedule)
   *
   * Completion of step to share days and times whereby care is needed
   *
   * Owner: Jason Thai
   *
   * @param properties The event's properties (e.g. cta_clicked)
   * @param options Amplitude event options.
   * @param extra Extra untyped parameters for use in middleware.
   */
  jobPostedSchedule(
    properties: JobPostedScheduleProperties,
    options?: EventOptions,
    extra?: MiddlewareExtra,
  ) {
    return this.track(new JobPostedSchedule(properties), options, extra);
  }

  /**
   * Job Posted - Type
   *
   * [View in Tracking Plan](https://data.amplitude.com/caredotcom/Care.com%20v2/events/jdt_example/latest/Job%20Posted%20-%20Type)
   *
   * Selection of recurring, one-time or live-in needs
   *
   * Owner: Jason Thai
   *
   * @param properties The event's properties (e.g. cta_clicked)
   * @param options Amplitude event options.
   * @param extra Extra untyped parameters for use in middleware.
   */
  jobPostedType(
    properties: JobPostedTypeProperties,
    options?: EventOptions,
    extra?: MiddlewareExtra,
  ) {
    return this.track(new JobPostedType(properties), options, extra);
  }

  /**
   * Job Posted - Who Needs Care
   *
   * [View in Tracking Plan](https://data.amplitude.com/caredotcom/Care.com%20v2/events/jdt_example/latest/Job%20Posted%20-%20Who%20Needs%20Care)
   *
   * Completion of details around who needs care
   *
   * Owner: Jason Thai
   *
   * @param properties The event's properties (e.g. cta_clicked)
   * @param options Amplitude event options.
   * @param extra Extra untyped parameters for use in middleware.
   */
  jobPostedWhoNeedsCare(
    properties: JobPostedWhoNeedsCareProperties,
    options?: EventOptions,
    extra?: MiddlewareExtra,
  ) {
    return this.track(new JobPostedWhoNeedsCare(properties), options, extra);
  }

  /**
   * Member Enrolled - Caregiver Needs
   *
   * [View in Tracking Plan](https://data.amplitude.com/caredotcom/Care.com%20v2/events/jdt_example/latest/Member%20Enrolled%20-%20Caregiver%20Needs)
   *
   * The type of tasks that a family needs the caregiver to do
   *
   * Owner: Jason Thai
   *
   * @param properties The event's properties (e.g. caregiver_tasks)
   * @param options Amplitude event options.
   * @param extra Extra untyped parameters for use in middleware.
   */
  memberEnrolledCaregiverNeeds(
    properties: MemberEnrolledCaregiverNeedsProperties,
    options?: EventOptions,
    extra?: MiddlewareExtra,
  ) {
    return this.track(new MemberEnrolledCaregiverNeeds(properties), options, extra);
  }

  /**
   * Member Enrolled - Email Collection
   *
   * [View in Tracking Plan](https://data.amplitude.com/caredotcom/Care.com%20v2/events/jdt_example/latest/Member%20Enrolled%20-%20Email%20Collection)
   *
   * Step that higlights if we've completed email collection step
   *
   * Owner: Jason Thai
   *
   * @param properties The event's properties (e.g. caregiver_count)
   * @param options Amplitude event options.
   * @param extra Extra untyped parameters for use in middleware.
   */
  memberEnrolledEmailCollection(
    properties: MemberEnrolledEmailCollectionProperties,
    options?: EventOptions,
    extra?: MiddlewareExtra,
  ) {
    return this.track(new MemberEnrolledEmailCollection(properties), options, extra);
  }

  /**
   * Member Enrolled - First and Last Name
   *
   * [View in Tracking Plan](https://data.amplitude.com/caredotcom/Care.com%20v2/events/jdt_example/latest/Member%20Enrolled%20-%20First%20and%20Last%20Name)
   *
   * Completion of the first and last name step in enrollment
   *
   * Owner: Jason Thai
   *
   * @param properties The event's properties (e.g. cta_clicked)
   * @param options Amplitude event options.
   * @param extra Extra untyped parameters for use in middleware.
   */
  memberEnrolledFirstAndLastName(
    properties: MemberEnrolledFirstAndLastNameProperties,
    options?: EventOptions,
    extra?: MiddlewareExtra,
  ) {
    return this.track(new MemberEnrolledFirstAndLastName(properties), options, extra);
  }

  /**
   * Member Enrolled - Location
   *
   * [View in Tracking Plan](https://data.amplitude.com/caredotcom/Care.com%20v2/events/jdt_example/latest/Member%20Enrolled%20-%20Location)
   *
   * Completion of the location step
   *
   * Owner: Jason Thai
   *
   * @param properties The event's properties (e.g. city)
   * @param options Amplitude event options.
   * @param extra Extra untyped parameters for use in middleware.
   */
  memberEnrolledLocation(
    properties: MemberEnrolledLocationProperties,
    options?: EventOptions,
    extra?: MiddlewareExtra,
  ) {
    return this.track(new MemberEnrolledLocation(properties), options, extra);
  }

  /**
   * Member Enrolled - Type of Senior Care Need
   *
   * [View in Tracking Plan](https://data.amplitude.com/caredotcom/Care.com%20v2/events/jdt_example/latest/Member%20Enrolled%20-%20Type%20of%20Senior%20Care%20Need)
   *
   * What folks click on when ask if they're interested in in-home, senior living or not sure
   *
   * Owner: Anir Dayal
   *
   * @param properties The event's properties (e.g. cta_clicked)
   * @param options Amplitude event options.
   * @param extra Extra untyped parameters for use in middleware.
   */
  memberEnrolledTypeOfSeniorCareNeed(
    properties: MemberEnrolledTypeOfSeniorCareNeedProperties,
    options?: EventOptions,
    extra?: MiddlewareExtra,
  ) {
    return this.track(new MemberEnrolledTypeOfSeniorCareNeed(properties), options, extra);
  }

  /**
   * Screen Viewed - Type of Senior Care Need
   *
   * [View in Tracking Plan](https://data.amplitude.com/caredotcom/Care.com%20v2/events/jdt_example/latest/Screen%20Viewed%20-%20Type%20of%20Senior%20Care%20Need)
   *
   * Views of first step in the senior care enrollment flow.
   *
   * Owner: Anir Dayal
   *
   * @param properties The event's properties (e.g. referer)
   * @param options Amplitude event options.
   * @param extra Extra untyped parameters for use in middleware.
   */
  screenViewedTypeOfSeniorCareNeed(
    properties: ScreenViewedTypeOfSeniorCareNeedProperties,
    options?: EventOptions,
    extra?: MiddlewareExtra,
  ) {
    return this.track(new ScreenViewedTypeOfSeniorCareNeed(properties), options, extra);
  }

  addEventMiddleware(middleware: Middleware): void {
    this.middlewares.push(middleware);
  }

  private runMiddleware(payload: MiddlewarePayload, next: MiddlewareNext): void {
    let curMiddlewareIndex = -1;
    const middlewareCount = this.middlewares.length;

    const middlewareNext: MiddlewareNext = curPayload => {
      curMiddlewareIndex += 1;
      if (curMiddlewareIndex < middlewareCount) {
        this.middlewares[curMiddlewareIndex](curPayload, _next);
      } else {
        next(curPayload);
      }
    };

    const _next: MiddlewareNext = middlewareCount > 0 ? middlewareNext : next;

    _next(payload);
  }
}

export const ampli = new Ampli();

// BASE TYPES
type ConfigExt = Partial<Config> & { plan?: Plan };

export type Plan = {
  branch?: string;
  source?: string;
  version?: string;
  versionId?: string;
};

export enum SpecialEventType {
  Identify = 'Identify',
  Group = 'Group',
}

export type BaseEvent = {
  event_type: string;
  event_properties?: { [key: string]: any };
  plan?: Plan;
  user_id?: string;
  device_id?: string;
};
export type IdentifyEvent = BaseEvent & { event_type: SpecialEventType.Identify };
export type GroupEvent = BaseEvent & { event_type: SpecialEventType.Group };
export type Event = BaseEvent | IdentifyEvent | GroupEvent;

type BaseEventOptions = Omit<BaseEvent, 'event_type' | 'event_properties'> & {
  callback: Callback;
  errorCallback: Callback;
};
export type EventOptions = BaseEventOptions;
export type IdentifyOptions = BaseEventOptions;
export type GroupOptions = BaseEventOptions;

/**
 * Unstructured object to let users pass extra data to middleware
 */
export interface MiddlewareExtra {
  [name: string]: any;
}

/**
 * Data to be processed by middleware
 */
export interface MiddlewarePayload {
  event: Event;
  extra?: MiddlewareExtra;
}

/**
 * Function called at the end of each Middleware to run the next middleware in the chain
 */
export type MiddlewareNext = (payload: MiddlewarePayload) => void;

/**
 * A function to run on the Event stream (each logEvent call)
 *
 * @param payload The event and extra data being sent
 * @param next Function to run the next middleware in the chain, not calling next will end the middleware chain
 */
export type Middleware = (payload: MiddlewarePayload, next: MiddlewareNext) => void;
